/**
 * 模拟 glyphy库：字体渲染 的 圆弧 实现
 * 
 * 见 https://github.com/moyy/glyphy
 */
class Glyphy {
    static create(gl) {
        let e = new Glyphy(gl);

        let a_glyph_vertex = [
            -0.0572518185, 1.07746112, 28.0, 32.0,
            -0.0572518185, 0.290714115, 28.0, 33.0,
            0.631151795, 1.07746112, 29.0, 32.0,
            0.631151795, 0.290714115, 29.0, 33.0,
        ];

        let indices = [0, 1, 2, 1, 2, 3];

        let program = ProgramManager.getInstance().getProgram("glyphy.vs", "glyphy.fs");

        let material = GlyphyMaterial.create(gl, program);
        e.mesh = Mesh.create(gl);

        e.mesh.setMaterial(material);
        e.mesh.setIndices(indices);

        e.mesh.addAttribute("a_glyph_vertex", 4, a_glyph_vertex);

        return e;
    }

    constructor(gl) {
        this.gl = gl;
        this.mesh = null;
    }

    draw(camera) {
        this.mesh.draw(camera);
    }
}

class GlyphyMaterial {
    static create(gl, program) {
        return new GlyphyMaterial(gl, program);
    }

    constructor(gl, program) {
        this.gl = gl;
        this.program = program;

        this.tex_w = 128;
        this.tex_h = 128;
        this.tex = initTexture(gl, this.tex_w, this.tex_h);

        this.uColor = [0.0, 0.0, 0.0, 1.0];

        // 0 false, 1 true
        this.u_debug = 0;
        this.u_outline = 0;

        // 浮点：范围

        // [0.1, 10.0]
        this.u_contrast = 1.0

        // [0.1, 10.]
        this.u_gamma_adjust = 1.0;

        // [0.5, 3.0]
        this.u_outline_thickness = 1.0;

        // [-0.2, 0.48]
        this.u_boldness = 0.0;

        this.uWorld = mat4.create();
        mat4.identity(this.uWorld);
    }

    setWorldMatrix(m) {
        this.uWorld = m;
    }

    setColor(r, g, b, a) {
        this.uColor = [r, g, b, a];
    }

    use(camera) {
        let gl = this.gl;
        let program = this.program;

        gl.useProgram(this.program.id);

        let uWorld = program.getUniform("uWorld");
        gl.uniformMatrix4fv(uWorld, false, this.uWorld);

        let uView = program.getUniform("uView");
        gl.uniformMatrix4fv(uView, false, camera.uView);

        let uProj = program.getUniform("uProj");
        gl.uniformMatrix4fv(uProj, false, camera.uProj);

        let uColor = program.getUniform("uColor");
        gl.uniform4f(uColor, ...this.uColor);

        let u_debug = program.getUniform("u_debug");
        gl.uniform1f(u_debug, this.u_debug);

        let u_contrast = program.getUniform("u_contrast");
        gl.uniform1f(u_contrast, this.u_contrast);

        let u_gamma_adjust = program.getUniform("u_gamma_adjust");
        gl.uniform1f(u_gamma_adjust, this.u_gamma_adjust);

        let u_outline = program.getUniform("u_outline");
        gl.uniform1f(u_outline, this.u_outline);

        let u_outline_thickness = program.getUniform("u_outline_thickness");
        gl.uniform1f(u_outline_thickness, this.u_outline_thickness);

        let u_boldness = program.getUniform("u_boldness");
        gl.uniform1f(u_boldness, this.u_boldness);

        gl.bindTexture(gl.TEXTURE_2D, this.tex);
        let item_w = 64;
        let item_h_q = 8;

        let u_atlas_info = program.getUniform("u_atlas_info");
        gl.uniform4i(u_atlas_info, this.tex_w, this.tex_h, item_w, item_h_q);

        let u_atlas_tex = program.getUniform("u_atlas_tex");
        gl.uniform1i(u_atlas_tex, 0);

    }
}

const initTexture = (gl, tex_w, tex_h) => {
    let data = new Uint8Array([
        0, 0, 224, 9, 0, 0, 233, 11, 0, 0, 233, 11, 0, 0, 233, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 9, 0, 0, 253, 12, 0, 0, 253, 12, 0, 1, 9, 9, 0, 0, 226, 7, 0, 0, 225, 8, 0, 0, 233, 11, 0, 0, 233, 7, 0, 0, 233, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 7, 0, 0, 246, 7, 0, 0, 253, 12, 0, 1, 9, 9, 0, 1, 18, 8, 0, 0, 226, 7, 0, 0, 226, 7, 0, 0, 233, 11, 0, 0, 233, 6, 0, 0, 233, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 6, 0, 0, 248, 5, 0, 0, 253, 12, 0, 1, 18, 8, 0, 1, 18, 8, 0, 0, 227, 6, 0, 0, 229, 4, 0, 1, 26, 5, 0, 1, 31, 4, 0, 1, 35, 3, 0, 1, 35, 3, 0, 1, 35, 3, 0, 1, 38, 3, 0, 1, 38, 3, 0, 1, 38, 3, 0, 1, 5, 4, 0, 1, 41, 6, 0, 1, 47, 3, 0, 1, 50, 7, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 57, 5, 0, 1, 35, 3, 0, 1, 35, 3, 198, 25, 192, 0, 198, 25, 192, 0,

        0, 1, 38, 3, 0, 1, 38, 3, 0, 1, 62, 5, 198, 98, 113, 225, 198, 98, 113, 225, 0, 1, 67, 5, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 72, 8, 0, 1, 72, 8, 0, 1, 80, 6, 0, 1, 86, 4, 0, 1, 86, 4, 0, 1, 90, 6, 0, 1, 96, 8, 0, 1, 96, 8, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 5, 0, 1, 75, 5, 0, 1, 77, 3, 188, 159, 64, 0, 188, 159, 64, 0, 0, 1, 93, 3, 0, 1, 99, 5, 0, 1, 99, 5, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 5, 0, 1, 77, 3, 0, 1, 104, 4, 0, 1, 104, 4, 0, 1, 93, 3, 0, 1, 99, 5, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 4, 188, 212, 141, 144, 0, 1, 108, 4, 0, 1, 108, 4, 188, 243, 242, 71, 0, 1, 112, 4, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

        198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 4, 0, 1, 75, 4, 0, 1, 108, 4, 0, 1, 108, 4, 0, 1, 112, 4, 0, 1, 112, 4, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 4, 0, 1, 108, 4, 0, 1, 108, 4, 0, 1, 112, 4, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 54, 14, 32, 198, 54, 14, 32, 0, 1, 75, 4, 0, 1, 108, 4, 0, 1, 108, 4, 0, 1, 112, 4, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 116, 3, 198, 54, 14, 32, 0, 1, 75, 4, 0, 1, 119, 7, 0, 1, 126, 7, 0, 1, 112, 4, 198, 98, 113, 225, 198, 98, 113, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 133, 6, 0, 1, 133, 5, 0, 1, 139, 16, 0, 1, 139, 16, 0, 1, 145, 5, 0, 1, 144, 6,

        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 139, 7, 0, 1, 139, 7, 0, 1, 139, 8, 0, 1, 142, 8, 0, 1, 143, 7, 0, 1, 143, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 139, 8, 0, 1, 139, 11, 0, 1, 139, 11, 0, 1, 142, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 181, 49, 98, 120, 154, 49, 108, 42, 137, 49, 121, 165, 132, 33, 120, 28, 138, 33, 90, 208, 162, 17, 71, 188, 215, 17, 109, 212, 49, 18, 128, 193, 32, 110, 0, 237, 243, 68, 128, 185, 221, 49, 107, 162, 181, 49, 98, 120, 154, 49, 108, 42, 137, 49, 121, 165, 132, 33, 120, 28, 138, 33, 90, 208, 162, 17, 71, 188, 215, 17, 109, 212, 49, 18, 128, 193, 32, 110, 0, 95, 212, 225, 68, 74, 160, 225, 90, 253, 137, 209, 121, 109, 132, 209, 123, 221, 136, 193, 112, 140, 148, 193, 91, 99, 173, 193, 114, 74, 211, 193, 128, 8, 243, 180, 0, 71, 46, 226, 109, 95, 212, 225, 68, 74, 160, 225,

        90, 253, 137, 209, 121, 109, 132, 209, 123, 221, 136, 193, 112, 140, 148, 193, 91, 99, 173, 193, 114, 74, 211, 193, 128, 8, 243, 180, 0, 90, 29, 158, 128, 71, 46, 226, 0, 71, 46, 226, 109, 95, 212, 225, 68, 74, 160, 225, 90, 253, 137, 209, 121, 109, 132, 209, 123, 221, 136, 193, 112, 140, 148, 193, 0, 90, 29, 158, 128, 71, 46, 226, 0, 71, 46, 226, 109, 95, 212, 225, 68, 74, 160, 225, 90, 253, 137, 209, 121, 109, 132, 209, 123, 221, 136, 193, 0, 90, 29, 158, 128, 71, 46, 226, 0, 237, 243, 68, 128, 185, 221, 49, 0, 188, 215, 17, 109, 212, 49, 18, 128, 193, 32, 110, 0, 237, 243, 68, 128, 185, 221, 49, 0, 212, 49, 18, 128, 193, 32, 110, 0, 8, 243, 180, 128, 237, 243, 68, 128, 185, 221, 49, 0, 74, 211, 193, 128, 8, 243, 180, 128, 237, 243, 68, 0, 71, 46, 226, 109, 95, 212, 225, 0, 74, 211, 193, 128, 8, 243, 180, 0, 90, 29, 158, 128, 71, 46, 226, 0, 90, 29, 158, 128, 71, 46, 226, 109, 95, 212, 225, 0, 71, 46, 226, 109, 95, 212, 225, 68, 74, 160, 225, 90, 253, 137, 209, 121, 109, 132, 209, 0, 90, 29, 158, 128, 71, 46, 226, 0, 8, 243, 180, 128, 237, 243, 68, 128, 185, 221, 49, 0, 212, 49, 18, 128, 193, 32, 110, 0, 74, 211, 193, 128, 8, 243, 180,

        128, 237, 243, 68, 0, 90, 29, 158, 128, 71, 46, 226, 0, 71, 46, 226, 109, 95, 212, 225, 68, 74, 160, 225, 0, 90, 29, 158, 128, 71, 46, 226, 0, 8, 243, 180, 128, 237, 243, 68, 128, 185, 221, 49, 0, 212, 49, 18, 128, 193, 32, 110, 0, 242, 183, 124, 128, 106, 79, 86, 128, 133, 79, 166, 0, 8, 243, 180, 128, 237, 243, 68, 128, 185, 221, 49, 0, 242, 183, 124, 128, 106, 79, 86, 128, 133, 79, 166, 0, 8, 243, 180, 128, 237, 243, 68, 0, 106, 79, 86, 128, 133, 79, 166, 0, 74, 211, 193, 128, 8, 243, 180, 128, 237, 243, 68, 0, 106, 79, 86, 128, 133, 79, 166, 128, 245, 183, 124, 0, 74, 211, 193, 128, 8, 243, 180, 128, 237, 243, 68, 0, 90, 29, 158, 128, 71, 46, 226, 0, 106, 79, 86, 128, 133, 79, 166, 128, 245, 183, 124, 0, 242, 183, 124, 128, 106, 79, 86, 128, 133, 79, 166, 128, 245, 183, 124, 0, 242, 183, 124, 128, 106, 79, 86, 0, 133, 79, 166, 128, 245, 183, 124, 0, 90, 29, 158, 128, 71, 46, 226, 0, 133, 79, 166, 128, 245, 183, 124, 0, 212, 49, 18, 128, 193, 32, 110, 102, 223, 77, 110, 0, 212, 49, 18, 128, 193, 32, 110, 0, 245, 183, 124, 128, 242, 183, 124, 128, 106, 79, 86, 0, 133, 79, 166, 128, 245, 183, 124, 0, 90, 29, 158, 128, 71, 46, 226,
    ]);

    let tex = gl.createTexture();

    gl.bindTexture(gl.TEXTURE_2D, tex);

    gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, tex_w, tex_h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

    let w = 64;
    let h = 7;
    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, w, h - 1, gl.RGBA, gl.UNSIGNED_BYTE, data);

    data = new Uint8Array([
        0, 245, 183, 124, 128, 242, 183, 124, 128, 106, 79, 86, 0, 133, 79, 166, 128, 245, 183, 124, 0, 212, 49, 18, 128, 193, 32, 110, 102, 223, 77, 110, 95, 23, 105, 126, 114, 116, 119, 126, 123, 3, 123, 142, 0, 212, 49, 18, 128, 193, 32, 110, 102, 223, 77, 110, 95, 23, 105, 126, 114, 116, 119, 126, 123, 3, 123, 142, 124, 157, 119, 142, 114, 0, 105, 158, 95, 58, 76, 158, 102, 90, 29, 158, 128, 71, 46, 226, 0, 245, 183, 124, 128, 242, 183, 124, 128, 106, 79, 86, 0, 133, 79, 166, 128, 245, 183, 124,
    ]);

    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, h - 1, data.length / 4, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);

    gl.bindTexture(gl.TEXTURE_2D, null);

    return tex;
}